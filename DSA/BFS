#include <iostream>
#include <bits/stdc++.h>
using namespace std;

void prepareAdjList(unordered_map<int, list<int>> &adjList, vector<pair<int, int>> &edges)
{
    for (int i = 0; i < edges.size(); i++)
    {
        int u = edges[i].first;
        int v = edges[i].second;

        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }
}
void bfs(unordered_map<int, list<int>> &adjList, unordered_map<int, bool> &vis, vector<int> &ans, int node)
{
    queue<int> q;
    q.push(node);
    vis[node] = 1;

    while (!q.empty())
    {
        int frontNode = q.front();
        q.pop();

        ans.push_back(frontNode);

        for (auto i : adjList[frontNode])
        {
            if (!vis[i])
            {
                q.push(i);
                vis[i] = 1;
            }
        }
    }
}
vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    unordered_map<int, bool> vis;
    unordered_map<int, list<int>> adjList;
    vector<int> ans;

    prepareAdjList(adjList, edges);

    // traverse all components
    for (int i = 0; i < vertex; i++)
    {
        if (!vis[i])
        {
            bfs(adjList, vis, ans, i);
        }
    }
    return ans;
}
// codestudio
void BFS_Traversal(int n, vector<vector<int>> adj)
{
    // adj list ={{1,2,3},{4},{5},{},{},{}}

    unordered_map<int, bool> visited;
    vector<int> ans;

    int j = 0;
    visited[j] = true;
    queue<int> q;
    q.push(j);

    for (int i = 0; i < n; i++)
    {
        if (!visited[i])
        {
            while (!q.empty())
            {
                int frontNode = q.front();
                q.pop();

                ans.push_back(frontNode);

                for (int i : adj[frontNode])
                {
                    if (!visited[i])
                    {
                        q.push(i);
                        visited[i] = true;
                    }
                }
            }
        }
    }

    for (int i = 0; i < ans.size(); i++)
    {
        cout << ans[i] << " ";
    }
    cout << endl;
}
int main()
{

    vector<pair<int, int>> edges = {{0, 1},
                                    {0, 4},
                                    {1, 2},
                                    {1, 3},
                                    {2, 3},
                                    {3, 4}};
    vector<int> ans = BFS(5, edges);

    for (auto i : ans)
    {
        cout << i << " ";
    }
    cout << endl;

    vector<vector<int>> adj = {{1, 2}, {0, 2}, {0, 1}, {}};

    BFS_Traversal(4, adj);
    return 0;
}
